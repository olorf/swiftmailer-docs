<?xml version="1.0" encoding="UTF-8"?>
<project name="Swift Mailer Docs" default="dita2xhtmlfragments">
  
  <property environment="env" />
  <property name="transtype" value="xhtml"/>
  <property name="path" value="." />
  <property name="base" value="${path}/.." />
  <property name="xsl.dir" value="${base}/xsl" />
  <property name="output.dir" value="${base}/output/xhtmlfragments" />
  <property name="dita.temp.dir" value="${base}/temp" />
  <property name="clean.temp" value="yes" />
  <property name="dita.dir" value="${env.DITA_DIR}" />
  <property name="dita.lib.dir" value="${dita.dir}/lib" />
  <property name="template.dir" value="${base}/template" />
  <property name="args.input" value="${template.dir}/documentation.ditamap" />
  <property name="args.copycss" value="no" />
  <property name="args.xsl" value="${xsl.dir}/dita2xhtmlfragment.xsl" />
  <property name="args.xhtml.toc" value="toc" />
  <property name="validate" value="yes" />
    
  <import file="${env.DITA_DIR}/build_dita2xhtml.xml" />
  
  <!-- Path reference for dita-ot jars -->
  <path id="dost.class.path">
    <fileset dir="${dita.lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>
  
  <!-- Process the XHTML fragments and copy them to docs.dir -->
  <target name="generate-docs" depends="dita2xhtmlfragments">
    <copy todir="${docs.dir}">
      <fileset dir="${base}/output/xhtmlfragments" />
    </copy>
  </target>

  <!-- Process the XHTML fragments -->
  <target name="dita2xhtmlfragments"
    depends="dita2xhtmlfragments-body, dita2xhtmlfragments-head">
  </target>
  
  <!-- Process the XHTML fragment body -->
  <target name="dita2xhtmlfragments-body">
    <antcall target="dita2xhtml">
      <param name="output.dir" value="${base}/output/xhtmlfragments/body" />
      <param name="args.xsl" value="${xsl.dir}/dita2xhtmlfragment-body.xsl" />
    </antcall>
  </target>
  
  <!-- Process the XHTML fragment meta data -->
  <target name="dita2xhtmlfragments-head">
    <antcall target="dita2xhtml">
      <param name="output.dir" value="${base}/output/xhtmlfragments/head" />
      <param name="args.xsl" value="${xsl.dir}/dita2xhtmlfragment-head.xsl" />
    </antcall>
  </target>
  
  <!-- The following overrides the imported build script to use a different TOC Stylsheet -->
  
  <!--<target name="dita.map.xhtml.toc"
      unless="noMap" if="old.transform"
      description="Build HTML TOC file">
    <xslt processor="trax"
        basedir="${dita.temp.dir}"
        destdir="${output.dir}"
        includes="${user.input.file}"
        classpathref="dost.class.path"
        style="${xsl.dir}/map2xhtmfragmenttoc.xsl">
      <param name="DITAEXT" expression="${dita.ext}" if="dita.ext" />
      <param name="OUTEXT" expression="${out.ext}" if="out.ext" />
      <param name="contenttarget" expression="${args.xhtml.contenttarget}" if="args.xhtml.contenttarget"/>
      <param name="CSS" expression="${args.css.file}" if="args.css.file" />
      <param name="CSSPATH" expression="${user.csspath}" if="user.csspath" />
      <param name="OUTPUTCLASS" expression="${args.xhtml.toc.class}" if="args.xhtml.toc.class" />
      <mapper type="glob"
          from="*${dita.input.filename}"
          to="*${args.xhtml.toc}${out.ext}" />
    </xslt>
  </target>-->
  
  <target name="dita.out.map.xhtml.toc"
      unless="noMap" if="inner.transform"
      description="Build HTML TOC file,which will adjust the directory">
    <xslt processor="trax"
        basedir="${dita.temp.dir}"
        destdir="${output.dir}/.."
        includes="${user.input.file}"
        classpathref="dost.class.path"
        style="${xsl.dir}/map2xhtmfragmenttoc.xsl">
      <param name="DITAEXT" expression="${dita.ext}" if="dita.ext" />
      <param name="OUTEXT" expression="${out.ext}" if="out.ext" />
      <param name="contenttarget" expression="${args.xhtml.contenttarget}" if="args.xhtml.contenttarget"/>
      <param name="CSS" expression="${args.css.file}" if="args.css.file" />
      <param name="CSSPATH" expression="${user.csspath}" if="user.csspath" />
      <param name="OUTPUTCLASS" expression="${args.xhtml.toc.class}" if="args.xhtml.toc.class" />
      <mapper type="glob"
          from="${user.input.file}"
          to="${args.xhtml.toc}${out.ext}" />
    </xslt>
  </target>
  
</project>
