<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
  "../dtd/concept.dtd">
<concept id="message-basics" xml:lang="en-us">
  <title>Message Basics</title>
  <shortdesc>
    A message is a container for anything you want to send to somebody else.  There are
    several basic aspects of a message that you should know.
  </shortdesc>
  <prolog>
    <author type="creator">Chris Corbyn</author>
    <copyright>
      <copyryear year="2008"/>
      <copyrholder>Chris Corbyn</copyrholder>
    </copyright>
    <critdates>
      <created date="2008-December-25"/>
      <revised modified="2008-December-25"/>
    </critdates>
    <metadata>
      <keywords>
        <keyword>swift mailer</keyword>
        <keyword>php</keyword>
        <keyword>message</keyword>
        <indexterm>
          messages
          <indexterm>headers</indexterm>
        </indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    
    <section conref="mime-components.xml#mime/mimebasics" />
    
    <section id="message-details">
      <title>The Structure of a Message</title>
      
      <p>
        Of all of the MIME entities, a message &#8211; <codeph>Swift_Message</codeph> is the
        largest and most complex.  It has many properties that can be updated and it can contain
        other MIME entities &#8211; attachments for example &#8211; nested inside it.
      </p>
      <p>
        A Message has a lot of different Headers which are there to present information about
        the message to the recipients' mail client.  Most of these headers will be familiar to
        the majority of users, but we'll list the basic ones.  Although it's possible to work
        directly with the Headers of a Message (or other MIME entity), the standard Headers have accessor
        methods provided to abstract away the complex details for you.  For example, although the Date
        on a message is written with a strict format, you only need to pass a UNIX timestamp to <codeph>setDate()</codeph>.
      </p>
      
      <simpletable>
        <sthead>
          <stentry>Header</stentry>
          <stentry>Description</stentry>
          <stentry>Accessors</stentry>
        </sthead>
        
        <strow>
          <stentry><codeph>Message-ID:</codeph></stentry>
          <stentry>Identifies this message with a unique ID, usually containining the
            domain name and time generated</stentry>
          <stentry><codeph>getId()</codeph> / <codeph>setId()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Return-Path:</codeph></stentry>
          <stentry>Specifies where bounces should go (Swift Mailer reads this for other uses)</stentry>
          <stentry><codeph>getReturnPath()</codeph> / <codeph>setReturnPath()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>From:</codeph></stentry>
          <stentry>Specifies the address of the person who the message is from.
            This can be multiple addresses if multiple people wrote the message.</stentry>
          <stentry><codeph>getFrom()</codeph> / <codeph>setFrom()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Sender:</codeph></stentry>
          <stentry>Specifies the address of the person who physically sent the message
            (higher precedence than <codeph>From:</codeph>)</stentry>
          <stentry><codeph>getSender()</codeph> / <codeph>setSender()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>To:</codeph></stentry>
          <stentry>Specifies the addresses of the intended recipients</stentry>
          <stentry><codeph>getTo()</codeph> / <codeph>setTo()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Cc:</codeph></stentry>
          <stentry>Specifies the addresses of recipients who will be copied in on the message</stentry>
          <stentry><codeph>getCc()</codeph> / <codeph>setCc()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Bcc:</codeph></stentry>
          <stentry>Specifies the addresses of recipients who the message will be blind-copied to.
            Other recipients will not be aware of these copies.</stentry>
          <stentry><codeph>getBcc()</codeph> / <codeph>setBcc()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Reply-To:</codeph></stentry>
          <stentry>Specifies the address where replies are sent to</stentry>
          <stentry><codeph>getReplyTo()</codeph> / <codeph>setReplyTo()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Subject:</codeph></stentry>
          <stentry>Specifies the subject line that is displayed in the recipients' mail client</stentry>
          <stentry><codeph>getSubject()</codeph> / <codeph>setSubject()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Date:</codeph></stentry>
          <stentry>Specifies the date at which the message was sent</stentry>
          <stentry><codeph>getDate()</codeph> / <codeph>setDate()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Content-Type:</codeph></stentry>
          <stentry>Specifies the format of the message (usually text/plain or text/html)</stentry>
          <stentry><codeph>getContentType()</codeph> / <codeph>setContentType()</codeph></stentry>
        </strow>
        
        <strow>
          <stentry><codeph>Conent-Transfer-Encoding:</codeph></stentry>
          <stentry>Specifies the encoding scheme in the message</stentry>
          <stentry><codeph>getEncoder()</codeph> / <codeph>setEncoder()</codeph></stentry>
        </strow>
        
      </simpletable>
    </section>
    
    <section id="message-tips">
      <title>Working with a Message Object</title>
      
      <p>
        Although there are a lot of available methods on a message object, you only need
        to make use of a small subset of them.  Usually you'll use <codeph>setSubject()</codeph>,
        <codeph>setTo()</codeph> and <codeph>setFrom()</codeph> before setting the body of your
        message with <codeph>setBody()</codeph>.
      </p>
      <p>
        Calling methods is simple.  You just call them like functions, but using the object
        operator "<codeph><![CDATA[->]]></codeph>" to do so.  If you've created a message object
        and called it <codeph>$message</codeph> then you'd set a subject on it like so:
        
<codeblock  outputclass="kodify php"><![CDATA[
<?php

require_once 'lib/swift_required.php';  

$message = Swift_Message::newInstance();
$message->setSubject('My subject');
]]>
</codeblock>
      </p>
      
      <p>
        All MIME entities (including a message) have a <codeph>toString()</codeph> method that
        you can call if you want to take a look at what is going to be sent.  For example, if you
        <codeph><![CDATA[echo $message->toString();]]></codeph> you would see something like this:
        
<codeblock  outputclass="kodify"><![CDATA[
Message-ID: <1230173678.4952f5eeb1432@swift.generated>
Date: Thu, 25 Dec 2008 13:54:38 +1100
Subject: Example subject
From: Chris Corbyn <chris@w3style.co.uk>
To: Receiver Name <recipient@example.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Here is the message
]]></codeblock>
      </p>
      
      <p>
        We'll take a closer look at the methods you use to create your message in the following
        sections.
      </p>
    </section>
    
  </conbody>
</concept>
