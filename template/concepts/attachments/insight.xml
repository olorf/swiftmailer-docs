<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
  "../../../dtd/concept.dtd">
<concept id="attachment-insight" xml:lang="en-us">
  <title>Attachments &#8211; More than Just Files</title>
  <shortdesc>
    Although we call files attached to messages "attachments", it's worth knowing
    what else is "attached" to a message.  MIME parts and forwarded messages are
    special types of attachment.
  </shortdesc>
  <prolog>
    <author type="creator">Chris Corbyn</author>
    <copyright>
      <copyryear year="2008"/>
      <copyrholder>Chris Corbyn</copyrholder>
    </copyright>
    <critdates>
      <created date="2008-December-25"/>
      <revised modified="2008-December-25"/>
    </critdates>
    <metadata>
      <keywords>
        <keyword>swift mailer</keyword>
        <keyword>php</keyword>
        <keyword>attachments</keyword>
        <keyword>mime parts</keyword>
        <keyword>forwarded messages</keyword>
        <indexterm>
          messages
          <indexterm>attachments</indexterm>
          <indexterm>alternative body</indexterm>
        </indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <section id="intro">
      <p>
        Swift Mailer is doing some clever things under-the-surface when it comes to generating
        a compliant message.  You too can do clever things once you know how it all works.
      </p>
      <p>
        We'll take a look at some of the common tasks that are performed with very little code
        on-the-surface, and then we'll see what's really going on.
      </p>
    </section>
    
    <section id="composition">
      <title>MIME Entities are Composite Objects</title>
      
      <p>
        First things first, you'll probably want to see what an attachment really looks like
        in source code (when viewed in the mail client).  If you read the earlier sections of
        this book you'll recall me mentioning that everything which makes up a message is a MIME
        entity, all of which implement the <codeph>Swift_Mime_MimeEntity</codeph> interface and
        consist of two basic units &#8211; headers and a body.
      </p>
      <p>
        So an attachment is just another MIME entity with some headers and a body.  The body is
        Base64 encoded using the Encoders from Swift Mailer, but we will brush over that aspect for
        now, focusing on the general structure.  Let's create an attachment from a simple text
        file containing the phrase "Hello World!", then we'll call it's <codeph>toString()</codeph>
        method to take a look at it, without the rest of the message&#8230; yes you can do that!
      </p>
<codeblock id="attachment_tostring"><![CDATA[
<?php

require_once 'lib/swift_required.php';

$attachment = Swift_Attachment::fromPath('hello-world.txt');
echo $attachment->toString();

]]></codeblock>
<codeblock id="attachment_structure"><![CDATA[Content-Type: text/plain; name=hello-world.txt
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=hello-world.txt

SGVsbG8gV29ybGQhCg==
]]></codeblock>

      <p>
        There we have it!  Headers and a body, just like a message in itself, but with less
        headers.  I don't need to go into detail about each of these headers&#8230; they serve
        the purpose of providing information to the mail client, just like the Headers of a message
        itself do.  Here they specify the filename and the content-type of the attachment.
      </p>
      <p>
        You notice that if you <codeph>base64_decode()</codeph> the body you get the string
        "Hello World!".  It really is that simple.
      </p>
      
      <p>
        Now lets look at what happens when we attach this attachment to a message and view the
        source.
      </p>
      
<codeblock id="adding_attachment"><![CDATA[
$message = Swift_Message::newInstance('Example')
  ->setTo('recipient@example.org')
  ->setFrom('sender@example.org')
  ->setBody('Please find attached file')
  ->attach($attachment)
  ;
  
echo $message->toString();

]]></codeblock>

<codeblock id="message_attachment_structure"><![CDATA[Message-ID: <1230249512.49541e2870f66@swift.generated>
Date: Fri, 26 Dec 2008 10:58:32 +1100
Subject: Example
From: sender@example.org
To: recipient@example.org
MIME-Version: 1.0
Content-Type: multipart/mixed;
 boundary="_=_swift_v4_123024951249541e2871ba9_=_"

--_=_swift_v4_123024951249541e2871ba9_=_
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Please find attached file
--_=_swift_v4_123024951249541e2871ba9_=_
Content-Type: text/plain; name=hello-world.txt
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=hello-world.txt

SGVsbG8gV29ybGQhCg==
--_=_swift_v4_123024951249541e2871ba9_=_--
]]></codeblock>

      <p>
        Ok, it looks quite complex now I admit (and this is just a simple example), but really
        it's not.  Just take a moment to look at the source here.  At the start of the message you
        can see that it's made up of, well &#8211; headers and a body.  It's the body that's gone all clever
        and show-offish here.  The body itself (when you look past the MIME boundary lines starting with
        <codeph>--</codeph> is made up of, well, you guessed it &#8211; headers and a body!
      </p>
      
      <p>
        Keep looking.  There are MIME boundaries which separate the bit we read (the "Please find attached file" note)
        from the attchment.  You can see the attachment source code, included verbatim inside the
        message source here.  It's "attached" to the message, only because it's nested in the source.
      </p>
      
      <p>
        Now lets do the same test with a message containing both HTML and plain text parts.
      </p>

<codeblock id="message_addpart"><![CDATA[
$message = Swift_Message::newInstance('Example')
  ->setTo('recipient@example.org')
  ->setFrom('sender@example.org')
  ->setBody('This is HTML', 'text/html')
  ->addPart('This is PLAIN TEXT', 'text/plain')
  ;

echo $message->toString();

]]></codeblock>

<codeblock id="message_mimepart_structure"><![CDATA[Message-ID: <1230250405.495421a5bc8eb@swift.generated>
Date: Fri, 26 Dec 2008 11:13:25 +1100
Subject: Example
From: sender@example.org
To: recipient@example.org
MIME-Version: 1.0
Content-Type: multipart/alternative;
 boundary="_=_swift_v4_1230250405495421a5c2056_=_"

--_=_swift_v4_1230250405495421a5c2056_=_
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

This is PLAIN TEXT
--_=_swift_v4_1230250405495421a5c2056_=_
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

This is HTML
--_=_swift_v4_1230250405495421a5c2056_=_--
]]></codeblock>

      <p>
        Does this look familiar?  It's got Headers and a body &#8211; of course.  It's
        then got little entities nested inside it, just like how an attachment works.
      </p>
      
      <p>
        Let's extract the plain text part and have a closer look.
      </p>
      
<codeblock id="mimepart_structure"><![CDATA[Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

This is PLAIN TEXT
]]></codeblock>

      <p>
        It's just like a little message in itself, with headers and a body, except it has just
        enough headers to specify how it should be displayed &#8211; it doesn't include the recipient
        headers or the subject for example.
      </p>
      
      <p>
        What Swift Mailer is really doing when you call <codeph>addPart()</codeph> is it's "attaching"
        a MIME part.  It does this just the same way you attach an attachment &#8211; by calling the
        <codeph>attach()</codeph> method of the message to attach an instance of <codeph>Swift_MimePart</codeph>.
        You can do this the long way around yourself and see what happens.
      </p>
      
<codeblock id="attach_mimepart"><![CDATA[
$message = Swift_Message::newInstance('Example')
  ->setTo('recipient@example.org')
  ->setFrom('sender@example.org')
  ->setBody('This is HTML', 'text/html')
  ->attach(Swift_MimePart::newInstance('This is PLAIN TEXT', 'text/plain'))
  ;
  
echo $message->toString();
]]></codeblock>

      <p>
        Also try creating a MIME part by itself and output the source.
      </p>
      
      <p>
        Everything that is a MIME entity can be attached to the message via the <codeph>attach()</codeph>
        method &#8211; even other Message objects (forwarded messages).
      </p>
    </section>
    
    <section id="internals">
      <title>Defining your own Entities</title>
      <p>
        It's not likely the many people will find a significant use for this architecture, but
        because it exists it is easy to define new types of MIME entity and include them in your message.
      </p>
      <p>
        We need to go into a lot more detail before you can do this successfully, but we'll cover that
        later in this book within some of the advanced topics.  [TODO]
      </p>
    </section>
  </conbody>
</concept>
