<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
  "../../dtd/task.dtd">
<task id="sending" xml:lang="en-us">
  <title>Quick Reference for Sending a Message</title>
  <shortdesc>
    Sending a message is very straightforward.  You create a Transport, use it to
    create the Mailer, then you use the Mailer to send the message.
  </shortdesc>
  <prolog>
    <author type="creator">Chris Corbyn</author>
    <copyright>
      <copyryear year="2008"/>
      <copyrholder>Chris Corbyn</copyrholder>
    </copyright>
    <critdates>
      <created date="2008-December-26"/>
      <revised modified="2008-December-26"/>
    </critdates>
    <metadata>
      <keywords>
        <keyword>swift mailer</keyword>
        <keyword>php</keyword>
        <keyword>sending</keyword>
        <keyword>message</keyword>
        <keyword>transport</keyword>
        <keyword>smtp</keyword>
        <keyword>sendmail</keyword>
        <indexterm>
          messages
          <indexterm>sending</indexterm>
        </indexterm>
        <indexterm>sending messages</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p>
        To send a Message:
      </p>
    </context>
    <steps>
      <step>
        <cmd>
          Create a Transport from one of the provided Transports &#8211;
          <codeph>Swift_SmtpTransport</codeph>, <codeph>Swift_SendmailTransport</codeph>,
          <codeph>Swift_MailTransport</codeph> or one of the aggregate Transports.
        </cmd>
      </step>
      <step>
        <cmd>
          Create an instance of the <codeph>Swift_Mailer</codeph> class, using the Transport
          as it's constructor parameter.
        </cmd>
      </step>
      <step>
        <cmd>
          Create a Message according to the instructions laid out in
          <xref href="../../topics/messages.xml" type="topic" />
        </cmd>
      </step>
      <step>
        <cmd>
          Send the message via the <codeph>send()</codeph> or the <codeph>batchSend()</codeph>
          methods on the Mailer object.
        </cmd>
      </step>
    </steps>
    
    <result>
      <p>
        When using <codeph>send()</codeph> the message will be sent just like it would
        be sent if you used your mail client.  An integer is returned which includes the
        number of successful recipients.  If none of the recipients could be sent to then
        zero will be returned, which equates to a boolean <codeph>false</codeph>.  If you
        set two <codeph>To:</codeph> recipients and three <codeph>Bcc:</codeph> recipients in
        the message and all of the recipients are delivered to successfully then the value
        5 will be returned.
      </p>
      <p>
        <codeph>batchSend()</codeph> returns a number just like <codeph>send()</codeph>,
        except that it does not include all of the <codeph>To:</codeph> recipients in the
        Headers.  Each recipient is sent a unique copy of the message with only their address
        in the headers.  This is advised for newsletter systems.
      </p>
    </result>
    
    <example id="quickexample">
      <title>Sending a Message</title>
<codeblock><![CDATA[
<?php

require_once 'lib/swift_required.php';

//Create the Transport
$transport = Swift_SmtpTransport::newInstance('smtp.example.org', 25)
  ->setUsername('your username')
  ->setPassword('your password')
  ;

/*
You could alternatively use a different transport such as Sendmail or Mail:

//Sendmail
$transport = Swift_SendmailTransport::newInstance('/usr/sbin/sendmail -bs');

//Mail
$transport = Swift_MailTransport::newInstance();
*/

//Create the Mailer using your created Transport
$mailer = Swift_Mailer::newInstance($transport);

//Create a message
$message = Swift_Message::newInstance('Wonderful Subject')
  ->setFrom(array('john@doe.com' => 'John Doe'))
  ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
  ->setBody('Here is the message itself')
  ;
  
//Send the message
$result = $mailer->send($message);

/*
You can alternatively use batchSend() to send the message

$result = $mailer->batchSend($message);
*/

]]></codeblock>
    </example>
    
  </taskbody>
</task>
