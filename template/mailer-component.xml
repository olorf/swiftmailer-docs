<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
  "../dtd/concept.dtd">
<concept id="components-mailer" xml:lang="en-us">
  <title>The Mailer</title>
  <shortdesc>
    The mailer class, <codeph>Swift_Mailer</codeph> is the central class in the library where all of the
    other components meet one another. <codeph>Swift_Mailer</codeph> acts as a sort of message dispatcher,
    communicating with the underlying Transport to deliver your Message to all intended
    recipients.
  </shortdesc>
  <prolog>
    <author type="creator">Chris Corbyn</author>
    <copyright>
      <copyryear year="2008"/>
      <copyrholder>Chris Corbyn</copyrholder>
    </copyright>
    <critdates>
      <created date="2008-December-22"/>
      <revised modified="2008-December-2"/>
    </critdates>
    <metadata>
      <keywords>
        <keyword>swift mailer</keyword>
        <keyword>php</keyword>
        <indexterm>mailer</indexterm>
        <indexterm>Swift_Mailer</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p>
      If you were to dig around in the source code for Swift Mailer you'd notice that <codeph>Swift_Mailer</codeph>
      itself is pretty bare.  It delegates to other objects for most tasks and in theory, if you knew the internals
      of Swift Mailer well you could by-pass this class entirely.  We wouldn't advise doing such a thing however &#8211;
      there are reasons this class exists:
      <ul>
        <li>for consistency, regardless of the Transport used</li>
        <li>to provide abstraction from the internals in the event internal API changes are made</li>
        <li>to provide convenience wrappers around aspects of the internal API</li>
      </ul>
    </p>
    <p>
      An instance of <codeph>Swift_Mailer</codeph> is created by the developer before sending any Messages.
    </p>
  </conbody>
</concept>
